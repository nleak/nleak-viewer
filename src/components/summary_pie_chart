import styled from "@emotion/styled";
import { ChartData } from "chart.js";
import { Pie } from "react-chartjs-2";
import { SnapshotSizeSummary } from "../common/interfaces";

interface Props {
  heapStats: SnapshotSizeSummary[];
}

const ChartWrapper = styled.div`
  max-width: 700px;
  margin: 0 auto;
`;

const PieChart: React.FunctionComponent<Props> = ({ heapStats }) => {
  const generateChartData = (): ChartData => {
    const labels: string[] = ['hiddenSize','arraySize','stringSize','objectSize','codeSize','closureSize','regexpSize','heapNumberSize','nativeSize','syntheticSize','consStringSize','slicedStringSize','symbolSize','unknownSize'];
	var agghiddensize, aggarraysize, aggstringsize, aggobjectsize, aggcodesize, aggclosuresize, aggregexsize, aggheapnumbersize, aggnativesize, aggsytheticsize, aggconstringsize, aggslicedstringsize, aggsymbolsize, aggunknownsize;

    heapStats.forEach((snapshot) => {
      agghiddensize += snapshot.hiddenSize;
	  aggarraysize += snapshot.arraySize;
	  aggstringsize += snapshot.stringSize;
	  aggobjectsize += snapshot.objectSize;
	  aggcodesize += snapshot.codeSize;
	  aggclosuresize += snapshot.closureSize;
	  aggregexsize += snapshot.regexpSize;
	  aggheapnumbersize += snapshot.heapNumberSize;
	  aggnativesize += snapshot.nativeSize;
	  aggsytheticsize += snapshot.syntheticSize;
	  aggconstringsize += snapshot.consStringSize;
	  aggslicedstringsize += snapshot.slicedStringSize;
	  aggsymbolsize += snapshot.symbolSize;
	  aggunknownsize += snapshot.unknownSize;
    });

	const data: number[] = [agghiddensize, aggarraysize, aggstringsize, aggobjectsize, aggcodesize, aggclosuresize, aggregexsize, aggheapnumbersize, aggnativesize, aggsytheticsize, aggconstringsize, aggslicedstringsize, aggsymbolsize, aggunknownsize];

    return {
      labels,
      datasets: [
        {
          label: "snapshot summary",
          data,
          backgroundColor: [
            "rgba(255, 99, 132, 0.2)",
            "rgba(54, 162, 235, 0.2)",
            "rgba(255, 206, 86, 0.2)",
            "rgba(75, 192, 192, 0.2)",
            "rgba(153, 102, 255, 0.2)",
            "rgba(255, 159, 64, 0.2)",
			"rgba(255, 0, 255, 0.2)",
            "rgba(128, 128, 128, 0.2)",
            "rgba(0, 0, 128, 0.2)",
          ],
          borderColor: [
            "rgba(255, 99, 132, 1)",
            "rgba(54, 162, 235, 1)",
            "rgba(255, 206, 86, 1)",
            "rgba(75, 192, 192, 1)",
            "rgba(153, 102, 255, 1)",
            "rgba(255, 159, 64, 1)",
			"rgba(255, 0, 255, 0.2)",
            "rgba(128, 128, 128, 0.2)",
            "rgba(0, 0, 128, 0.2)",
          ],
          borderWidth: 1,
        },
      ],
    };
  };

  return (
    <ChartWrapper>
      <Pie data={generateChartData()}/>
    </ChartWrapper>
  );
};

export default PieChart;